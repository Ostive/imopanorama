//npx prisma migrate dev --name update_schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model User {
<<<<<<< HEAD
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String
  phoneNumber   String
  profilePhoto  String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  roleId        Int
  role          Role            @relation(fields: [roleId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([roleId])
=======
  id            String    @id @default(cuid())
  first_name    String?
  last_name     String?
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone_number  String?
  role          UserRole  @default(CUSTOMER)
  accounts      Account[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]
>>>>>>> 3446c28164d4dfde3ffa9a54a79847da661e415f
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])

  // @@map("accounts")
}

<<<<<<< HEAD
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
=======
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Property {
  id          String  @id @default(cuid())
  title       String
  type        String
  location    String
  price       Float
  description String?
  images      Bytes[] // Assurez-vous que c’est un tableau de chaînes (URLs)
  user        User?   @relation(fields: [userId], references: [id])
  userId      String?

  ParkingProperty     ParkingProperty?
  BoatProperty        BoatProperty?
  LandProperty        LandProperty?
  ResidentialProperty ResidentialProperty?
  CommercialProperty  CommercialProperty?
>>>>>>> 3446c28164d4dfde3ffa9a54a79847da661e415f

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@map("sessions")
}

<<<<<<< HEAD
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  // @@map("verification_tokens")
  
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
=======
model ParkingProperty {
  id           String   @id @default(cuid())
  property     Property @relation(fields: [propertyId], references: [id])
  parking_type String
  size         Float
  propertyId   String   @unique
}

model BoatProperty {
  id         String   @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  length     Float
  boat_type  String
  propertyId String   @unique
}

model LandProperty {
  id         String   @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  land_area  Float
  propertyId String   @unique
}

model ResidentialProperty {
  id           String   @id @default(cuid())
  property     Property @relation(fields: [propertyId], references: [id])
  bedrooms     Int
  bathrooms    Int
  living_space Float
  built_year   Int
  floors       Int
  propertyId   String   @unique
}

model CommercialProperty {
  id               String   @id @default(cuid())
  property         Property @relation(fields: [propertyId], references: [id])
  rooms            Int
  commercial_space Float
  propertyId       String   @unique
}
>>>>>>> 3446c28164d4dfde3ffa9a54a79847da661e415f
